// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ********************
//  Template Table
// ********************
model GCTemplate {
  id          String    @id
  title       String
  description String    @db.Text
  format      String    @db.Text
  updated_at  DateTime  @default(now())
  created_at  DateTime  @default(now())
  input       GCInput[]
}

model GCInput {
  id             String       @id
  label          String
  required       Boolean
  description    String       @db.Text
  target_value   String
  replace_format String
  count          Int?
  typeId         String
  templateId     String
  type           GCType       @relation(fields: [typeId], references: [id])
  template       GCTemplate   @relation(fields: [templateId], references: [id])
  typeItem       GCTypeItem[]
}

model GCType {
  id      String    @id
  label   String
  GCInput GCInput[]
}

model GCTypeItem {
  id          String   @id
  label       String
  description String   @db.Text
  inputId     String?
  input       GCInput? @relation(fields: [inputId], references: [id])
}

// ********************
//  NextAuth configure
// ********************

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
